#!/bin/sh
SYNC_BRANCH=${CENTRAL_BRANCH:-upstream/master}

function localBranches() {
  git branch | sed -e s/\*//g | tr -s " " | cut -d " " -f 2 | sort
}

function remoteBranches() {
  git branch -r | grep origin | grep -v HEAD | sed -e s/origin\\///g | \
      tr -s " " | cut -d " " -f 2 | sort
}

function localStatus() {
  BEHIND=$(git log --no-merges $1..${SYNC_BRANCH} --pretty=oneline | wc -l)
  AHEAD=$(git log --no-merges ${SYNC_BRANCH}..$1 --pretty=oneline | wc -l)
  printf "%-30s ${TEXT_GREEN}%5d ${TEXT_RED}%5d${RESET_FORMATTING}\n" $1 $AHEAD $BEHIND
}

function remoteStatus() {
  BEHIND=$(git log --no-merges origin/$1..${SYNC_BRANCH} --pretty=oneline | wc -l)
  AHEAD=$(git log --no-merges ${SYNC_BRANCH}..origin/$1 --pretty=oneline | wc -l)
  printf "%-30s ${TEXT_GREEN}%5d ${TEXT_RED}%5d${RESET_FORMATTING}\n" $1 $AHEAD $BEHIND
}

function dualStatus() {
  BEHIND_SYNC=$(git log --no-merges $1..${SYNC_BRANCH} --pretty=oneline | wc -l)
  AHEAD_SYNC=$(git log --no-merges ${SYNC_BRANCH}..$1 --pretty=oneline | wc -l)
  BEHIND_ORIGIN=$(git log --no-merges $1..origin/$1 --pretty=oneline | wc -l)
  AHEAD_ORIGIN=$(git log --no-merges origin/$1..$1 --pretty=oneline | wc -l)
  COMMENT=""
  if [ $AHEAD_SYNC = 0 ]; then
    if [ $1 != master ]; then
      COMMENT="git branch -D $1; git push origin :$1"
    fi
  fi
  printf "%-30s ${TEXT_GREEN}%5d ${TEXT_RED}%5d %10s${TEXT_GREEN}%5d ${TEXT_RED}%5d${RESET_FORMATTING}      %s\n" \
      $1 $AHEAD_ORIGIN $BEHIND_ORIGIN "" $AHEAD_SYNC $BEHIND_SYNC "$COMMENT"
}

localBranches > /tmp/$$.local.tmp
remoteBranches > /tmp/$$.remote.tmp
comm -12 /tmp/$$.local.tmp /tmp/$$.remote.tmp > /tmp/$$.both.tmp
comm -13 /tmp/$$.local.tmp /tmp/$$.remote.tmp > /tmp/$$.remoteonly.tmp
comm -23 /tmp/$$.local.tmp /tmp/$$.remote.tmp > /tmp/$$.localonly.tmp


printf "${TEXT_RED}%-30s${RESET_FORMATTING} %s\n" "Local Only Branches" "vs ${SYNC_BRANCH}"
cat /tmp/$$.localonly.tmp | while read -r i; do localStatus "$i"; done | sort -k 1 -n
echo ""

printf "${TEXT_RED}%-30s${RESET_FORMATTING} %s\n" "Remote Only Branches" "vs ${SYNC_BRANCH}"
cat /tmp/$$.remoteonly.tmp | while read -r i; do remoteStatus "$i"; done | sort -k 1 -n
echo ""

printf "${TEXT_GREEN}%-30s${RESET_FORMATTING} %-20s %s\n" "Synced Branches" "vs origin" "and ${SYNC_BRANCH}"
cat /tmp/$$.both.tmp | while read -r i; do dualStatus "$i"; done | sort -k 1 -n
echo ""

rm /tmp/$$.*.tmp
